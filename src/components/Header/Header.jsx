import React,{useState} from 'react';
import { withRouter } from 'react-router-dom'
import styles from './Header.module.css';
import './header.less'

import { Row, Col, Menu } from 'antd';


// import Author from '../../components/Author/Author';

function Header(props) {
  // 下面两条语句应该使用key-value的Map重写
  const eKeyArr = ['logo','first','selection','search','creator','me','author'];
  const eValueArr = ['University', '首页', '精选好文', 'Search', '写文章', '个人中心', 'Author',]
  const menuKeyValue = new Map();
  for (let index = 0,eKeyArrLen=eKeyArr.length; index < eKeyArrLen; index++) {
    menuKeyValue.set(eKeyArr[index],eValueArr[index])
  }
  const KVconstant = {
    LOGO:eKeyArr[0],FIRST:eKeyArr[1],SELECTION:eKeyArr[2],SEARCH:eKeyArr[3],CREATOR:eKeyArr[4],ME:eKeyArr[5],AUTHOR:eKeyArr[6],
  }
   console.log('menuKeyValue<<',menuKeyValue);
  const [linkKey, setLinkKey] = useState(eKeyArr);
  const [linkValue, setLinkValue] = useState(eValueArr);

  const handleMainHeader = (e) => {
    //  console.log('handleClick/e<<', e);
    
    const eKey = e.key;
    switch (eKey) {
      case KVconstant.LOGO:
        console.log(KVconstant.LOGO)
        break;
    
      case KVconstant.FIRST:
        break;
    
      case KVconstant.SELECTION:
        break;
    
      case KVconstant.SEARCH:
        break;
    
      case KVconstant.CREATOR:
        props.history.push('/'+KVconstant.CREATOR)
        break;
    
      case KVconstant.ME:
        console.log("props<<", props)
        props.history.push('/'+KVconstant.ME)
        break;
    
      case KVconstant.AUTHOR:
        console.log(KVconstant.AUTHOR)
        break;
    
      default:
        break;
    }
  }
  const handleSubHeader = (e) => {
    console.log('handleClick/e<<', e);
    
    const eKey = e.key;


  }


/* 
  const getMenuItemsNodes = () => {
    const menuNodes = eKeyArr.map((cValue, index) => {
      return (
        <Menu.Item key={cValue}>
          <span className={cValue} id={cValue}>{eValueArr[index]}</span>
        </Menu.Item>
      )
    })
    console.log('menuNodes<<',menuNodes);
    return menuNodes;
  }
   */
  const getMenuItemsNodes = () => {
    let menuNodes=[];
     menuKeyValue.forEach((value, key, map) => {
      menuNodes.push (
        <Menu.Item key={key}>
          <span className={key} id={key}>{value}</span>
        </Menu.Item>
      )
    })
    console.log('menuNodes<<',menuNodes);
    return menuNodes;
  }
  const menuItemsNodes = getMenuItemsNodes()

  return (
    <div
      // className="header"
      className={styles.header}
    >
      <title>Univerity</title>
      <meta name="description" content="Generated by create next app" />
      <link rel="icon" href="/favicon.ico" />

      <Row justify="space-around" wrap="false"
        className={styles.main_header}>
        <Col xs={24} sm={24} md={24} lg={24} xl={24} span={24}>
          <Menu
            id="main-menu"
            mode="horizontal"
            onClick={handleMainHeader}
          >
            {menuItemsNodes}
            
            {/* 
            <Menu.Item key="logo">
              <Icon type="home" />
              <span className="logo" id="logo">University</span>
            </Menu.Item>
            */}
          </Menu>
          

        </Col>
      </Row>
      
      <Row justify="space-around" wrap="false"
        id="nav-header">
        <Col flex="space-around" className="memu-div" xs={24} sm={24} md={24} lg={24} xl={24}>
          <Menu mode="horizontal"
            id="nav-header-menu"
            onClick={handleSubHeader}
          >
            <Menu.Item key="0">
              {/* <Icon type="home" /> */}
              First
            </Menu.Item>
            <Menu.Item key="video">
              {/* <Icon type="youtube" /> */}
              recommend
            </Menu.Item>
            <Menu.Item key="life">
              {/* <Icon type="smile" /> */}
              Industry
            </Menu.Item>

            <span className="header-txt" id="header-me">标签</span>

          </Menu>
        </Col>
      </Row>
    </div>
  )
}

export default withRouter(Header)